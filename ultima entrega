//******************************************************LCD1602***************************************************
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
//LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); 
LiquidCrystal_I2C lcd(0x27, 16, 2); 
//*******************************************************keypad***************************************************
const char rows = 4; // set display to four rows
const char cols = 4; // set display to three columns

const char keys[rows][cols] = {
              {'1','2','3','A'},
               {'4','5','6','B'},
               {'7','8','9','C'},
               {'*','0','#','D'}
               };
               
char rowPins[rows] = {D9, D8, D7, D6};
char colPins[cols] = {D5, D4, D3, D2};

//**************************************************DHT11 Y CONEXION WIFI******************************************

#include <ESP8266WiFi.h>
#include "DHT.h"
#define DHTPIN D0     // EL PIN DONDE ESTA CONECTADO EL DHT11
#define DHTTYPE DHT11   
DHT dht(DHTPIN, DHTTYPE);
 
// Configuración Wi-Fi
const char* ssid = "German"; // your wireless network name (SSID)
const char* password = "Maytheforcebewithyou"; // your Wi-Fi network password
WiFiClient client;

// ThingSpeak Settings
const int channelID = 1497230;
String writeAPIKey = "R6ISQC8F3HI1JKBI"; // write API key for your ThingSpeak Channel
const char* server = "api.thingspeak.com";
const int postingInterval = 10 * 1000; // post data every x seconds

 

//************************************************************SERVO***********************************************
#include <Servo.h>
Servo myservo;
  int referenciagiro=2;//para el giro del servo de un lado para el otro
  int a=1;
  int b=2;
//**********************************************************PARA CUENTAS*****************************************
 
char codigo[2];               //Cadena donde se guardaran los caracteres de las teclas presionadas
int tomounidaddecimal;        //paso a entero el numero codigo correspondiente
int tomounidad;               //paso a unidad la unidad de numero codigo correspondiente 
int decimal;                  //paso a un decimal el numero de tomounidaddecimal
int numero;
int cont=0;                   //variable que se incrementara al presionar las teclas
float circunferencia = 502.4; //diametro*pi 160*3,14
float angulo;
unsigned long referenciatiempo;//referencia para usar el servo
unsigned long giro = 30000;//cada seis horas seria 360000


void setup()
{
   Serial.begin(115200);
// KEYPAD
   for(char r = 0; r < rows; r++){
         pinMode(rowPins[r],INPUT_PULLUP );    //set the row pins as input
         digitalWrite(rowPins[r], HIGH);    //turn on the pullups
   }
   
   for(char c = 0; c < cols; c++){
         pinMode(colPins[c],OUTPUT );   //set the column pins as output
   }
  //LCD1602
  lcd.init();
  lcd.backlight();
  //lcd.begin(16,2);
  lcd.setCursor(3,0);         
  lcd.print("INCUBADORA");
  lcd.setCursor(7, 1);
  lcd.print("ITS"); 
  delay (3000);
  lcd.clear();  
  lcd.setCursor(3,0);         
  lcd.print("Por favor");
  lcd.setCursor(3,1);         
  lcd.print("ingresa mm"); 
  delay (2000); 
  //DHT11 y WIFI 
  dht.begin();   
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
  delay(500);
  }
  //SERVO
  myservo.attach(D10);//el servo iria en el pin
}

char getKey()
      {
      char k = 0;
      for(char c = 0; c < cols; c++)
        {
        digitalWrite(colPins[c], LOW);
        for(char r = 0; r < rows; r++)
            {
            if(digitalRead(rowPins[r]) == LOW)
              {
              delay(20);    //20ms debounce time
              while(digitalRead(rowPins[r])== LOW);
              k = keys[r][c];
              }
            }
        digitalWrite(colPins[c], HIGH); 
        }
      return k;
      }
 void loop()
 { 
        int pos;//para el giro mas lento
        // Measure Analog Input (D12)
        float h = dht.readHumidity();
        float t = dht.readTemperature();      
        codigo[cont]=45;  
        // lo que sigue esta para que no se corte la com con el lcd 
        for(char c = 0; c < cols; c++){
        pinMode(colPins[c],OUTPUT );   
        digitalWrite(colPins[c], HIGH);
            }
        char key = getKey();  
        for(char c = 0; c < cols; c++){
        digitalWrite(colPins[c], LOW);
            }
       //para que no se corte com con lcd lo de arriba   
        if(key != 0)
              {
              Serial.println(key);
              codigo[cont]=key;   
              //int tomounidaddecimal = codigo[0]- '0';   
              //int decimal = tomounidaddecimal*10;   
              codigo[cont+1]=45; 
              lcd.clear();  
              lcd.setCursor(4,0);
              lcd.print("Diametro");
              lcd.setCursor(6,1);
              lcd.print(codigo[0]);
              lcd.setCursor(7,1);
              lcd.print(codigo[1]);
              lcd.setCursor(8,1);
              lcd.print("mm"); 
              cont=cont+1;
              if (codigo[1] != 45)         //se evalúa si es diferente a 45, o sea "-"
                { 
                lcd.clear();  
                lcd.setCursor(4,0);
                lcd.print("Diametro");
                lcd.setCursor(6,1);
                lcd.print(codigo[0]);
                lcd.setCursor(7,1);
                lcd.print(codigo[1]);
                lcd.setCursor(8,1);
                lcd.print("mm"); 
                //delay (3000);
                }
              }       
        if (codigo[0] != 45 && codigo[1] != 45)
              { 
              int tomounidaddecimal = codigo[0]- '0';   
              int decimal = tomounidaddecimal*10;   
              int tomounidad = codigo[1]- '0';    
              numero = decimal+tomounidad;      
              angulo = (numero*360)/circunferencia; 
              referenciatiempo = millis();      
              if (referenciatiempo > giro)
                {
                if (referenciagiro == 2)
                    {  
                    //myservo.write(angulo);
                    for (pos = 0; pos <= angulo; pos += 1) 
                    { 
                    myservo.write(pos);             
                    delay(15);                      
                    }
                    giro = referenciatiempo + 20000; 
                    referenciagiro = a;
                    //delay (1000); 
                    }
                else 
                    {  
                    //myservo.write(0);
                    for (pos = angulo; pos >= 0; pos -= 1) 
                    { 
                    myservo.write(pos);             
                    delay(15); 
                    }
                    giro = referenciatiempo + 20000;  
                    referenciagiro = b;
                    //delay (1000); 
                    }  
              float h = dht.readHumidity();
              float t = dht.readTemperature();      
              float hic = dht.computeHeatIndex(t, h, false);
              lcd.clear();
              lcd.setCursor(3,0);         
              lcd.print("Humedad");
              lcd.setCursor(3,1);
              lcd.print(h); 
              lcd.setCursor(8,1);
              lcd.print("%"); 
              delay (2000);
              lcd.clear();
              lcd.setCursor(2,0);         
              lcd.print("Temperatura");
              lcd.setCursor(3,1);
              lcd.print(t); 
              lcd.setCursor(8,1);
              lcd.print("C"); 
              delay (2000);   
              }
           if (client.connect(server, 80)) 
            {

            // Measure Analog Input (A0)
            //float h = dht.readHumidity();
            //float t = dht.readTemperature();
            // Construct API request body
            String body = "&field1=";
                   body += String(t);
                   body += "&field2=";
                   body += String(h);
            client.println("POST /update HTTP/1.1");
            client.println("Host: api.thingspeak.com");
            client.println("User-Agent: ESP8266 (nothans)/1.0");
            client.println("Connection: close");
            client.println("X-THINGSPEAKAPIKEY: " + writeAPIKey);
            client.println("Content-Type: application/x-www-form-urlencoded");
            client.println("Content-Length: " + String(body.length()));
            client.println("");
            client.print(body);
            Serial.println ("Humedad");
            Serial.println (h);
            Serial.println ("Temperatura");
            Serial.println (t);
            delay (1000);
            }
            client.stop();
            // wait and then post again
            delay(postingInterval);  
          } 
 }
