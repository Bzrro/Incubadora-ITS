#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2); 
//*******************************************************keypad***************************************************
const char rows = 4; // cuatro filas
const char cols = 3; // tres columnas

const char keys[rows][cols] = {
              {'1','2','3'},
               {'4','5','6'},
               {'7','8','9'},
               {'*','0','#'}
               };
               
char rowPins[rows] = {D9, D8, D7, D6};
char colPins[cols] = {D5, D4, D3};

//**************************************************DHT11 Y CONEXION WIFI******************************************

#include <ESP8266WiFi.h>
#include "DHTesp.h"
DHTesp dht;
// Configuración Wi-Fi

const char* ssid = "********"; // nombre de la red
const char* password = "*********"; // contraseña de la red
WiFiClient client;

// ThingSpeak 

const int channelID = *******;//channel id del canal ThingSpeak
String writeAPIKey = "**************"; //llave API para el canal ThingSpeak
const char* server = "api.thingspeak.com";
const int postingInterval = 10 * 1000; // intervalo a usar para tiempo entre posteo

float anguloamandar; 
float calentador;

//************************************************************SERVO***********************************************
#include <Servo.h>
Servo myservo;
  int referenciagiro=2;//para el giro del servo de un lado para el otro
  int a=1;
  int b=2;
/*
Respecto al giro del huevo y en base a asesoramiento de personas relacionadas con la actividad (criadores 
de gallinas) es que decidimos realizarla de la siguiente forma: comenzando a los dos días y terminando tres días
antes que se cumplan los viente días.  
De esa forma tendran 15 días de giro, dos veces por día. 
Para eso vamos a usar la función millis() la cual regresa el número de milisegundos desde que se comenzo a corrrer 
el programa (overflow a los 50 días, los cual es perfecto porque sólo precisamos veinte). 
Entonces para las cuentas tenemos: 2 días serían 2*24*60*60 segundos, entonces haría eso por 1000 (milisegundos), lo 
cual da 172800000
Y para que termine tenemos que calcular 17 despues de que empieza, entonces tenemos 17*24*60*60 segundos, que haciendolo
eso por 1000 (milisegundos), lo cual da 1468800000 
*/  
  //int cotamenor = 172800000; //a los 2 días comienza el giro del huevo
  //int cotamayor = 1468800000;//a los 17 días termina el giro del huevo  
  int cotamenor = 30000;//cota para prueba
  int cotamayor = 108000;//cota para prueba 
//**********************************************************PARA CUENTAS*****************************************
 
char codigo[2];               //Cadena donde se guardaran los caracteres de las teclas presionadas
int tomounidaddecimal;        //paso a entero el numero codigo correspondiente
int tomounidad;               //paso a unidad la unidad de numero codigo correspondiente 
int decimal;                  //paso a un decimal el numero de tomounidaddecimal
int numero;
int cont=0;                   //variable que se incrementara al presionar las teclas
float circunferencia = 502.6; //diametro*pi 160*3,14, en este caso el radio es 8cm (80mm)
float angulo;
unsigned long referenciatiempo;//referencia para usar el servo
//unsigned long giro = 43200000;//doce horas serian 43200000 milisegundos (12*60*60*1000)
unsigned long giro = 30000;//para pruebas
//Relé
#define pin D12  

void setup()
{

   Serial.begin(115200);
   dht.setup(D0, DHTesp::DHT11);
// KEYPAD
   for(char r = 0; r < rows; r++){
         pinMode(rowPins[r],INPUT_PULLUP );    //seteo filas como entradas
         digitalWrite(rowPins[r], HIGH);    //seteo los pullups
   }
   
   for(char c = 0; c < cols; c++){
         pinMode(colPins[c],OUTPUT );   //seteo las columnas como salida
   }
  //WIFI   
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
  delay(500);
  }
// LCD
  lcd.init();
  lcd.backlight();
  //lcd.begin(16,2);
  lcd.setCursor(3,0);         
  lcd.print("INCUBADORA");
  lcd.setCursor(7, 1);
  lcd.print("ITS"); 
  delay (3000);
  lcd.clear();  
  lcd.setCursor(3,0);         
  lcd.print("Por favor");
  lcd.setCursor(3,1);         
  lcd.print("ingresa mm"); 
  delay (2000); 
  //SERVO
  myservo.attach(D2);//el servo iria en el pin
  //rele
  pinMode(pin, OUTPUT); 
 
  codigo[cont]=45; 
  codigo[cont+1]=45; 
}

char getKey(){
      char k = 0;
      
      for(char c = 0; c < cols; c++){
        digitalWrite(colPins[c], LOW);
         for(char r = 0; r < rows; r++){
            if(digitalRead(rowPins[r]) == LOW){
            delay(20);    //20ms debounce time
            while(digitalRead(rowPins[r])== LOW);
            k = keys[r][c];
            }
         }
   digitalWrite(colPins[c], HIGH); 
      }
      return k;
}

 void loop()
 { 
        int pos;//para el giro mas lento       
        if (codigo[0] == 45 || codigo[1] == 45)
               { 
               Serial.println("Adentro del primer if");//prueba
               // lo que sigue está para que no se corte la comunicacion con el lcd 
               for(char c = 0; c < cols; c++){
               pinMode(colPins[c],OUTPUT );   
               digitalWrite(colPins[c], HIGH);
                    }
               char key = getKey();  
               for(char c = 0; c < cols; c++){
               digitalWrite(colPins[c], LOW);
                    }
               //para que esta arriba es para que no se corte comunicacin con lcd   
               Serial.println (key);
              if(key != 0)
                    {
                    Serial.println(key);
                    codigo[cont]=key;   
                    codigo[cont+1]=45; 
                    lcd.clear();  
                    lcd.setCursor(1,0);
                    lcd.print("Circunferencia");
                    lcd.setCursor(6,1);
                    lcd.print(codigo[0]);
                    lcd.setCursor(7,1);
                    lcd.print(codigo[1]);
                    lcd.setCursor(8,1);
                    lcd.print("mm"); 
                    cont=cont+1;
                    if (codigo[1] != 45)         //se evalúa si es diferente a 45, o sea "-"
                        { 
                        lcd.clear();  
                        lcd.setCursor(1,0);
                        lcd.print("Circunferencia");
                        lcd.setCursor(6,1);
                        lcd.print(codigo[0]);
                        lcd.setCursor(7,1);
                        lcd.print(codigo[1]);
                        lcd.setCursor(8,1);
                        lcd.print("mm"); 
                        delay (2000);
                        }
                    }   
              }    
        if (codigo[0]!=45 && codigo[1]!=45)
              { 
              delay(dht.getMinimumSamplingPeriod());
              float humidity = dht.getHumidity();
              float temperature = dht.getTemperature();
               
              lcd.clear();
              lcd.setCursor(3,0);         
              lcd.print("Humedad");
              lcd.setCursor(3,1);
              lcd.print(humidity);
              //lcd.print(h); 
              lcd.setCursor(8,1);
              lcd.print("%"); 
              delay (2000);
              lcd.clear();
              lcd.setCursor(2,0);         
              lcd.print("Temperatura");
              lcd.setCursor(3,1);
              lcd.print(temperature);
              //lcd.print(t); 
              lcd.setCursor(8,1);
              lcd.print("C"); 
              delay (2000);   
              if (temperature<36){
                  digitalWrite(pin, HIGH); 
                  calentador = 100; 
                  }
              else {
                  digitalWrite(pin, LOW);  
                  calentador = 0;   
                  }
              Serial.println ("Adentro del segundo if");//para prueba
              //delay (1000);  
              int tomounidaddecimal = codigo[0]- '0';   
              int decimal = tomounidaddecimal*10;   
              int tomounidad = codigo[1]- '0';    
              numero = decimal+tomounidad;      
              angulo = (numero*360)/circunferencia; 
              referenciatiempo = millis();      
              if (referenciatiempo>cotamenor && referenciatiempo<cotamayor)
              { 
                if (referenciatiempo > giro)
                {
                if (referenciagiro == 2)
                    {  
                    //myservo.write(angulo);
                    for (pos = 0; pos <= angulo; pos += 1) 
                    { 
                    myservo.write(pos);             
                    delay(15);                      
                    }
                    giro = referenciatiempo + 20000;//para probar 
                    //giro = referenciatiempo + 43200000; //cada 12 horas
                    referenciagiro = a;
                    anguloamandar = angulo;
                    Serial.println (anguloamandar);//para prueba
                    //delay (1000); 
                    }
                else 
                    {  
                    //myservo.write(0);
                    for (pos = angulo; pos >= 0; pos -= 1) 
                    { 
                    myservo.write(pos);             
                    delay(15); 
                    }
                    giro = referenciatiempo + 20000;//para probar  
                    //giro = referenciatiempo + 43200000; //cada 12 horas
                    referenciagiro = b;
                    anguloamandar = 0;
                    Serial.println (anguloamandar);//para prueba
                    //delay (1000); 
                    }  
                }
             } 
       
              Serial.println ("Afuera del if que conecta");
            if (client.connect(server, 80)) 
                {
                //contstruccion del cuerpo API
                String body = "&field1=";
                   body += String(temperature);
                   //body += String(t);
                   body += "&field2=";
                   body += String(humidity);
                   //body += String(h);
                   body += "&field3=";
                   body += String(anguloamandar);
                   body += "&field4=";
                   body += String(calentador);
                   
                client.println("POST /update HTTP/1.1");
                client.println("Host: api.thingspeak.com");
                client.println("User-Agent: ESP8266 (nothans)/1.0");
                client.println("Connection: close");
                client.println("X-THINGSPEAKAPIKEY: " + writeAPIKey);
                client.println("Content-Type: application/x-www-form-urlencoded");
                client.println("Content-Length: " + String(body.length()));
                client.println("");
                client.print(body);
                Serial.println ("Humedad");
                //Serial.println (h);
                Serial.println (humidity);
                Serial.println ("Temperatura");
                //Serial.println (t);
                Serial.println (temperature);
                Serial.println ("Angulo");
                Serial.println (anguloamandar);
                //delay (1000);
                }
                delay(500); 
                client.stop();
                // wait and then post again
                delay(postingInterval);//seguramente estos 10 segundos son los que me hagan mas lento el resto  
            } 
              
            
 }
